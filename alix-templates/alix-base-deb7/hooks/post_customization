#!/bin/bash
#
# (c) 2012-2013 YeaSoft Int'l - Leo Moll
#
# uic hook:	post_customization
# called by:	uic_create, uic_build, uic_upgrade
#
# This hook will be called by several commands after making any customizations
# (file copies and deletions) to the installation environment in $TARGET


# copy the configuration file to the destination file system but remove the array
# definitions since they are not compatible with /bin/sh
sed -e "s/^UIC_TARGET.*/# DELETEME/g" <  "${TARGET}/uictpl.conf" | grep -v "^# DELETEME" > "${TARGET}/chroot/etc/uictpl.conf"

# add some more information
echo "UIC_CREATION_TIMESTAMP=\"$(date +'%Y-%m-%d %H:%M %z')\"" >> "${TARGET}/chroot/etc/uictpl.conf"
echo "UIC_CREATION_VERSION=\"${VERSION}\"" >> "${TARGET}/chroot/etc/uictpl.conf"

# rewrite the /etc/motd
(
cat <<EOF

Welcome to Debian!

Installed from Debian (${UIC_RELEASE}) on $(date +'%Y-%m-%d %H:%M %z') using
 - UIC (Ubuntu Installation Creator) ${VERSION}
 - ${UIC_SRCNAME} ${UIC_SRCVERSION} uic template

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.

EOF
) > "$TARGET/chroot/etc/motd"

# Preparing for bootbank configuration
BOOTBANK_LABEL=bootbank
BOOTBANK_MOUNT=/mnt/bootbank
if [ -e "${TARGET}/chroot/etc/default/bootbank" ]; then
        . "${TARGET}/chroot/etc/default/bootbank"
fi

# determine data of root file system
rootdevice=$(df -T "${TARGET}/chroot"  | awk 'NR == 2 {print $1}')
rootfstype=$(df -T "${TARGET}/chroot"  | awk 'NR == 2 {print $2}')
if [ "${rootdevice}" = "" -o "${rootfstype}" = "" ]; then
	# root device cannot be determined
	show_error "It was not possible to determine root file system information for target system."
	exit 2
fi
rootfsname=$(e2label ${rootdevice})

urootdevice=$(df -T /  | awk 'NR == 2 {print $1}')

if [ "${rootdevice}" = "${urootdevice}" ]; then
	# we are not installing to a defined target - disable bootbank support
	echo "BOOTBANK_UPDATE=false" >> "${TARGET}/chroot/etc/default/bootbank"
else
	if [ ! -e /dev/disk/by-label/${BOOTBANK_LABEL} ]; then
		# there is no bootbank device - so disable bootbank support
		echo "BOOTBANK_UPDATE=false" >> "${TARGET}/chroot/etc/default/bootbank"
	else
		# save what we know in the bootbank preseed file
		echo "# automatically created file" > "${TARGET}/chroot/etc/default/bootbank-preseed"
		echo "rootdevice=${rootdevice}" >> "${TARGET}/chroot/etc/default/bootbank-preseed"
		echo "rootfstype=${rootfstype}" >> "${TARGET}/chroot/etc/default/bootbank-preseed"
		echo "rootfsname=${rootfsname}" >> "${TARGET}/chroot/etc/default/bootbank-preseed"
	fi

	# adapt /etc/fstab in case of installation
	if grep "[[:space:]]/[[:space:]]" "${TARGET}/chroot/etc/fstab" > /dev/null 2> /dev/null; then
		# root fs already declared in fstab
		exit 0
	fi

	if [ "${rootfsname}" = "" ]; then
		echo -e "\n${rootdevice}\t\t/\t\t${rootfstype}\tnoatime,errors=remount-ro\t0\t0" >> "${TARGET}/chroot/etc/fstab"
	else
		echo -e "\nLABEL=${rootfsname}\t\t/\t\t${rootfstype}\tnoatime,errors=remount-ro\t0\t0" >> "${TARGET}/chroot/etc/fstab"
	fi
fi
